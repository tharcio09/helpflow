
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Modelo para os Usuários
model User {
  id        String   @id @default(cuid())
  name      String?
  email     String?  @unique
  image     String?
  emailVerified DateTime?
  role      Role     @default(CLIENT)

  tickets   Ticket[]  // Um usuário pode ter vários tickets
  accounts  Account[]
  sessions  Session[]
}

// Modelo para os Tickets de Suporte
model Ticket {
  id          String   @id @default(cuid())
  title       String
  description String
  status      Status   @default(OPEN) // Status: Aberto, Em Progresso, Fechado
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  userId    String // Chave para conectar o Ticket ao User
  author    User   @relation(fields: [userId], references: [id])
}

// Tipos pré-definidos para os papéis e status
enum Role {
  CLIENT
  AGENT
}

enum Status {
  OPEN
  IN_PROGRESS
  CLOSED
}

// --- Modelos necessários para a Autenticação (NextAuth.js) ---
model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String? @db.Text
  access_token       String? @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @db.Text
  session_state      String?
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime
  @@unique([identifier, token])
}